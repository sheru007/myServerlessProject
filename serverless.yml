
service: myserverlessproject

frameworkVersion: '3'

provider:
    name: aws
    runtime: nodejs12.x
    profile: serverlessUser
    environment:
        tableName: ${self:custom.tableName}
        bucketName: ${self:custom.bucketName}
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:*
              - S3:*
              - ses:*
              - sns:SetSMSAttributes
              - sns:Publish
              - comprehend:*
          Resource: "*"

plugins:
    - serverless-s3-sync
    - serverless-webpack
    - serverless-add-api-key

package:
    individually: true

custom:
    tableName: player-points
    bucketName: myserverlessprojectuploadbucket-sherukhan
    s3Sync:
        - bucketName: myserverlessprojectuploadbucket-sherukhan
          localDir: UploadData
    apiKeys:
        - name: MyFirstApiKey  #trzu2JqQzC1tuLOvDnDfQ5BLp1w8RVWE13O7nKHs
          usagePlan: 
              quota:
                  limit: 1000  # no of time it can hit in specify period(MONTH here)
                  period: MONTH
              throttle:
                  rateLimit: 5   # per sec api can hit
                  burstLimit: 20  # for some time, it can go to burst limit but came back to rate limit

functions:
    getUser:
        handler: lambdas/endpoints/getUser.handler
        events: 
            - http:
                  path: get-user/{ID}
                  method: GET
                  cors: true
                  private: true
    getPlayerScore:
        handler: lambdas/endpoints/getPlayerScore.handler
        events: 
            - http:
                  path: get-player-score/{ID}
                  method: GET
                  cors: true
    createPlayerScore:
        handler: lambdas/endpoints/createPlayerScore.handler
        events: 
            - http:
                  path: create-player-score/{ID}
                  method: POST
                  cors: true
    createFile:
        handler: lambdas/endpoints/createFile.handler
        events: 
            - http:
                  path: create-file/{fileName}
                  method: POST
                  cors: true
    getFile:
        handler: lambdas/endpoints/getFile.handler
        events: 
            - http:
                  path: get-file/{fileName}
                  method: GET
                  cors: true
    sendEmail:
        handler: lambdas/endpoints/sendEmail.handler
        events: 
            - http:
                  path: send-email
                  method: POST
                  cors: true
    sendSMS:
        handler: lambdas/endpoints/sendSMS.handler
        events: 
            - http:
                  path: send-sms
                  method: POST
                  cors: true
    analyseText:
        handler: lambdas/endpoints/analyseText.handler
        events: 
            - http:
                  path: analyse-text
                  method: POST
                  cors: true
    proxy:
        handler: lambdas/endpoints/proxy.handler
        events:
            - http:
                  path: sk-proxy-api/{proxy+}
                  method: ANY
                  integration: http-proxy
                  request: 
                      uri: http://api.icndb.com/{proxy}  #proxy = /jokes/random or jokes/18
                      parameters: 
                          paths:
                              proxy: true

resources:
    Resources:
        DemoBucketUpload:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: ${self:custom.bucketName}
        MyDynamodbTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.tableName}
                AttributeDefinitions:
                    - AttributeName: ID
                      AttributeType: S
                KeySchema:
                    - AttributeName: ID
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
        myAssumeRole:
            Type: AWS::IAM::Role
            Properties:
                RoleName: myAssumeRole
                AssumeRolePolicyDocument:
                    Version: '2012-10-17'
                    Statement: 
                        - Effect: Allow
                          Principal: 
                              Service: 
                                  - lambda.amazonaws.com
                                  - apigateway.amazonaws.com
                          Action:
                              - sts:AssumeRole