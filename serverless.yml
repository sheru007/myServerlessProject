
service: myserverlessproject

frameworkVersion: '3'

provider:
    name: aws
    runtime: nodejs12.x
    profile: serverlessUser
    environment:
        tableName: ${self:custom.tableName}
        bucketName: ${self:custom.bucketName}
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:*
              - S3:*
              - ses:*
              - sns:SetSMSAttributes
              - sns:Publish
              - comprehend:*
          Resource: "*"

plugins:
    - serverless-s3-sync
    - serverless-webpack
    - serverless-add-api-key

package:
    individually: true

custom:
    tableName: player-points
    bucketName: myserverlessprojectuploadbucket-sherukhan
    reactBucketName: myserverlessprojectuploadreactbucket-sherukhan1997
    s3Sync:
        - bucketName: ${self:custom.bucketName}
          localDir: UploadData
        - bucketName: ${self:custom.reactBucketName}
          localDir: demo-app/build/
    apiKeys:
        - name: MyFirstApiKey  #trzu2JqQzC1tuLOvDnDfQ5BLp1w8RVWE13O7nKHs
          usagePlan: 
              quota:
                  limit: 1000  # no of time it can hit in specify period(MONTH here)
                  period: MONTH
              throttle:
                  rateLimit: 5   # per sec api can hit
                  burstLimit: 20  # for some time, it can go to burst limit but came back to rate limit

functions:
    getUser:
        handler: lambdas/endpoints/getUser.handler
        events: 
            - http:
                  path: get-user/{ID}
                  method: GET
                  cors: true
                  private: true
    getPlayerScore:
        handler: lambdas/endpoints/getPlayerScore.handler
        events: 
            - http:
                  path: get-player-score/{ID}
                  method: GET
                  cors: true
    createPlayerScore:
        handler: lambdas/endpoints/createPlayerScore.handler
        events: 
            - http:
                  path: create-player-score/{ID}
                  method: POST
                  cors: true
    updatePlayerScore:
        handler: lambdas/endpoints/updatePlayerScore.handler
        events: 
            - http:
                  path: update-player-score/{ID}
                  method: PUT
                  cors: true
    getGameScores:
        handler: lambdas/endpoints/getGameScores.handler
        events:
            - http:
                  path: get-game-scores/{game}
                  method: GET
                  cors: true
    createFile:
        handler: lambdas/endpoints/createFile.handler
        events: 
            - http:
                  path: create-file/{fileName}
                  method: POST
                  cors: true
    getFile:
        handler: lambdas/endpoints/getFile.handler
        events: 
            - http:
                  path: get-file/{fileName}
                  method: GET
                  cors: true
    sendEmail:
        handler: lambdas/endpoints/sendEmail.handler
        events: 
            - http:
                  path: send-email
                  method: POST
                  cors: true
    reminderEmail:
        handler: lambdas/endpoints/reminderEmail.handler
        events: 
            - schedule: cron(0 9 ? * 6 *)    # minute hours day-of-month every-month(*) day-of-week(7 means saturday) every-week(*)
    morningNews:
        handler: lambdas/endpoints/morningNews.handler
        events: 
            - schedule: cron(15 7 ? * * *)
    sendSMS:
        handler: lambdas/endpoints/sendSMS.handler
        events: 
            - http:
                  path: send-sms
                  method: POST
                  cors: true
    analyseText:
        handler: lambdas/endpoints/analyseText.handler
        events: 
            - http:
                  path: analyse-text
                  method: POST
                  cors: true
    proxy:
        handler: lambdas/endpoints/proxy.handler
        events:
            - http:
                  path: sk-proxy-api/{proxy+}
                  method: ANY
                  integration: http-proxy
                  request: 
                      uri: http://api.icndb.com/{proxy}  #proxy = /jokes/random or jokes/18
                      parameters: 
                          paths:
                              proxy: true

resources:
    Resources:
        DemoBucketUpload:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: ${self:custom.bucketName}
        ReactAppBucketUpload:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: ${self:custom.reactBucketName}
                AccessControl: PublicRead
                WebsiteConfiguration:
                    IndexDocument: index.html
                    ErrorDocument: index.html
        S3AccessPolicy:
            Type: AWS::S3::BucketPolicy
            Properties:
                Bucket:
                    Ref: ReactAppBucketUpload
                PolicyDocument:
                    Statement:
                        - Sid: PublicReadGetObject
                          Effect: Allow
                          Principal: '*'
                          Action:
                              - s3:GetObject
                          Resource: arn:aws:s3:::${self:custom.reactBucketName}/*
        CloudFrontDistribution:
            Type: AWS::CloudFront::Distribution
            Properties:
                DistributionConfig:
                    Origins:
                        - DomainName: ${self:custom.reactBucketName}.s3.amazonaws.com
                          Id: ReactApp
                          CustomOriginConfig:
                              HTTPPort: 80
                              HTTPSPort: 443
                              OriginProtocolPolicy: https-only
                    Enabled: 'true'
                    DefaultRootObject: index.html
                    CustomErrorResponses: 
                        - ErrorCode: 404
                          ResponseCode: 200
                          ResponsePagePath: /index.html
                    DefaultCacheBehavior: 
                        AllowedMethods:
                            - DELETE
                            - GET
                            - HEAD
                            - OPTIONS
                            - PATCH
                            - POST
                            - PUT
                        TargetOriginId: ReactApp
                        ForwardedValues:
                            QueryString: 'false'
                            Cookies: 
                                Forward: none
                        ViewerProtocolPolicy: redirect-to-https
                    ViewerCertificate:
                        CloudFrontDefaultCertificate: true
        MyDynamodbTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.tableName}
                AttributeDefinitions:
                    - AttributeName: ID
                      AttributeType: S
                    - AttributeName: game
                      AttributeType: S
                KeySchema:
                    - AttributeName: ID
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
                GlobalSecondaryIndexes:
                    - IndexName: game-index
                      KeySchema: 
                          - AttributeName: game
                            KeyType: HASH
                      Projection:
                          ProjectionType: ALL
        myAssumeRole:
            Type: AWS::IAM::Role
            Properties:
                RoleName: myAssumeRole
                AssumeRolePolicyDocument:
                    Version: '2012-10-17'
                    Statement: 
                        - Effect: Allow
                          Principal: 
                              Service: 
                                  - lambda.amazonaws.com
                                  - apigateway.amazonaws.com
                          Action:
                              - sts:AssumeRole